datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  name           String?
  hashedPassword String
  createdAt      DateTime       @default(now())

  // Oferty utworzone przez użytkownika
  offers         Offer[]

  // Ulubione oferty (relacja wiele-do-wielu)
  favorites      Offer[]        @relation("UserFavorites")

  // Relacja wiadomości (nadane przez użytkownika)
  messages       Message[]

  // Relacja rozmów – jako kupujący i sprzedający
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")
}

model Offer {
  id          String      @id @default(uuid())
  imageUrl    String?
  title       String
  description String
  price       Float
  major       String      // Tu przechowujemy wybrany KIERUNEK
  department  String      // Nowe pole: WYDZIAŁ
  category    Category?   // Nowe pole: KATEGORIA
  createdAt   DateTime    @default(now())

  // Relacja – autor oferty
  user        User        @relation(fields: [userId], references: [id])
  userId      String

  // Tagi
  tags        Tag[]       @relation("OfferTags")

  // Ulubione oferty
  favoritedBy User[]      @relation("UserFavorites")

  // Rozmowy dotyczące oferty
  conversations Conversation[]
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @unique

  // Relacja z ofertami
  offers Offer[] @relation("OfferTags")
}

enum Category {
  KSIAZKI
  NOTATKI
  KOREPETYCJE
  INNE
}

model Conversation {
  id        String    @id @default(uuid())
  offerId   String
  buyerId   String
  sellerId  String
  createdAt DateTime  @default(now())

  // Relacje
  offer     Offer     @relation(fields: [offerId], references: [id])
  buyer     User      @relation("BuyerConversations", fields: [buyerId], references: [id])
  seller    User      @relation("SellerConversations", fields: [sellerId], references: [id])
  messages  Message[]
}

model Message {
  id             String        @id @default(uuid())
  text           String
  senderId       String
  createdAt      DateTime      @default(now())
  conversationId String

  // Relacja – nadawca wiadomości
  sender         User          @relation(fields: [senderId], references: [id])
  // Relacja – do której rozmowy należy wiadomość
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
}
